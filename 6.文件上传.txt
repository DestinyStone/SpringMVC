1. jar包  commons-fileupload.jar   commons-io.jar

2. 配置 CommonsMultipartResolver   注意 id必须是 multipartResolver                  -1 代表无限制
<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	<property name="defaultEncoding" value="UTF-8"></property>
	<property name="maxUploadSize" value="1024000"></property>    <!-- 上传的文件最大值， 单位 kb  -->
	<property name="maxInMemorySize" value="2048000"></property>  <!-- 使用内存最大值   如果超过 则把内存的东西放入硬盘， 单位kb -->
</bean>

3. 处理方法
a. 前端提交文件
<form action="fileload" method="post" enctype="multipart/form-data">
	姓名： <input name="user" type="text" />
	文件： <input name="file" type="file" />
	<input type="submit" value="提交" />
</form> 

b. 后端接收文件
@RequestMapping(value="fileupload")
@ResponseBody
public String fileupload(@RequestParam("user") String user, @RequestParam("file") MultipartFile file) throws IOException {
		//获取名字
		System.out.println(user);	
		//获取文件的输入流
		InputStream input = file.getInputStream();		
		OutputStream output = new FileOutputStream("F:\\番剧\\123");	
		byte[] buff = new byte[1024];
		int len = -1;
		while( ( len = input.read(buff) ) != -1 ) {
			output.write(buff, 0, len);
		}		
		input.close();
		output.close();		
		return "success";
}

MultipartFile 一些方法
getInputStream()  获取文件输入流
getOriginalFileName()  获取文件名称



后续优化问题
如果前端是多个文件同时上传， 可使用 List<MultipartFile>  来接收 


  
